$(document).ready(function(){




	// Generated by CoffeeScript 1.9.3

  var KeyLogger, LogEntry,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LogEntry = (function() {
    function LogEntry(time, selectionRange, selectedText, pressedKey, pastedText, logEvent, editorChanged) {
      this.event_time = time;
      this.selection_range = selectionRange;
      this.selected_text = selectedText;
      this.pressed_key = pressedKey;
      this.pasted_text = pastedText;
      this.event_type = logEvent;
      if (editorChanged === 'undefined') {
        editorChanged = null;
      }
      this.editorChanged = editorChanged;
    }

    return LogEntry;

  })();

  KeyLogger = (function() {
    var getLogStringKeyhandler;

    function KeyLogger(editor, editor_jquery) {
      this.startLogging = bind(this.startLogging, this);
      this.sendLog = bind(this.sendLog, this);
      this.updateLog = bind(this.updateLog, this);
      this.captureKey = bind(this.captureKey, this);
      this.capturePaste = bind(this.capturePaste, this);
      this.captureCopy = bind(this.captureCopy, this);
      this.captureCut = bind(this.captureCut, this);
      this.getSelectionRange = bind(this.getSelectionRange, this);
      this.bind = bind(this.bind, this);
      this.editor = editor;
      this.editor_jquery = editor_jquery;
      this.log = [];
    }

    KeyLogger.prototype.bind = function() {
      this.editor_jquery.on({
        'copy': (function(_this) {
          return function(e) {
            return _this.log.push(_this.captureCopy(e));
          };
        })(this),
        'cut': (function(_this) {
          return function(e) {
            return _this.log.push(_this.captureCut(e));
          };
        })(this),
        'paste': (function(_this) {
          return function(e) {
            return _this.log.push(_this.capturePaste(e));
          };
        })(this),
        'keyup keypress': (function(_this) {
          return function(e) {
            return _this.log.push(_this.captureKey(e, null));
          };
        })(this)
      });
    };

    KeyLogger.prototype.getSelectionRange = function() {
      return {
        'from': this.editor.getCursor("anchor"),
        'to': this.editor.getCursor()
      };
    };

    KeyLogger.prototype.captureCut = function(e) {
      console.log('Cut Detected' + Date.now());
      return new LogEntry(Date.now(), this.getSelectionRange(), this.editor.getSelection('\n'), null, null, "cut", null);
    };

    KeyLogger.prototype.captureCopy = function(e) {
      console.log('Copy Detected');
      return new LogEntry(Date.now(), this.getSelectionRange(), this.editor.getSelection('\n'), null, null, "copy", null);
    };

    KeyLogger.prototype.capturePaste = function(e) {
      console.log('Paste Detected');
      return new LogEntry(Date.now(), this.getSelectionRange(), this.editor.getSelection('\n'), null, e.originalEvent.clipboardData.getData('text'), "paste", null);
    };

    KeyLogger.prototype.captureKey = function(e, editor, editorChanged) {
      return new LogEntry(Date.now(), this.getSelectionRange(), this.editor.getSelection('\n'), new getLogStringKeyhandler(e), null, "key", editorChanged);
    };

    KeyLogger.prototype.updateLog = function(t) {
      var entry;
      return this.log = (function() {
        var i, len, ref, results;
        ref = this.log;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          entry = ref[i];
          if (entry.event_time > t) {
            results.push(entry);
          }
        }
        return results;
      }).call(this);
    };

    KeyLogger.prototype.sendLog = function() {
      if (this.log.length > 0) {
        console.log(JSON.stringify(this.log));
        this.updateLog(Date.now());
      }
    };

    getLogStringKeyhandler = function(e) {
      this.altKey = e.altKey;
      this.ctrlKey = e.ctrlKey;
      this.key = e.key;
      this.keyCode = e.keyCode;
      this.timeStamp = e.timeStamp;
      this.type = e.type;
      return this.shiftKey = e.shiftKey;
    };

    KeyLogger.prototype.startLogging = function(t) {
      this.bind();
      window.setInterval(this.sendLog, t);
      return console.log('started logging...');
    };

    return KeyLogger;

  })();




    console.log('ready');
    var drop_down =$('select.lang-options');
    if(window.localStorage){
        console.log('have it!');
        var $get = window.localStorage.getItem('lang_choice');
        if($get){drop_down.val($get);}
    }
    window.editor=CodeMirror.fromTextArea($('#editor')[0],{
            mode:drop_down.val(),
            lineNumbers:true
        });

    drop_down.change(function(){
       //alert('hi');
        var mode=$(this).val();
        window.localStorage.setItem('lang_choice',mode);
        $(this).attr('data-mode',mode);
        window.editor.setOption('mode',mode);
    }
                              );
 
drop_down.trigger('change');
    var cm_wrapper = $('#textarea').find('.CodeMirror');
    var editor = cm_wrapper[0].CodeMirror;
   
  $('button#test').click(function(){
    logger = new KeyLogger(editor,cm_wrapper);
    logger.startLogging(5000);
    
  });
 
});
